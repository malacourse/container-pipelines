apiVersion: v1
kind: Template
labels:
  template: deployment-template
metadata:
  annotations:
    description: Application template for applications built using a Jenkins Pipeline
  name: deployment-template
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        #annotations:
        #  sidecar.agent.vaultproject.io/inject: "true"
        #  sidecar.agent.vaultproject.io/secret-key: secret/example
        #  sidecar.agent.vaultproject.io/vault-role: example
        labels:
          app: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}
        name: ${APPLICATION_NAME}
      spec:
        containers:
{% if addVault is defined %}
# Vault Agent
        - args:
            - agent
            - '-log-level=debug'
            - '-config=/vault/config/agent.config'
          env:
            - name: SKIP_SETCAP
              value: 'true'
            - name: VAULT_ADDR
              value: 'https://vault.hashicorp-vault.svc:8200'
            - name: VAULT_CAPATH
              value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
          image: 'vault:latest'
          imagePullPolicy: Always
          name: vault-agent
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /vault/config/agent.config
              name: vault-config
              subPath: agent.config
            - mountPath: /var/run/secrets/vaultproject.io
              name: vault-agent-volume
# Secret Fetcher
        - args:
            - start
          env:
            - name: LOG_LEVEL
              value: DEBUG
            - name: VAULT_ADDR
              value: 'https://vault.hashicorp-vault.svc:8200'
            - name: VAULT_CAPATH
              value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
            - name: VAULT_TOKEN
              value: /var/run/secrets/vaultproject.io/token
            - name: VAULT_SECRET
              value: secret/example
            - name: PROPERTIES_FILE
              value: /var/run/secrets/vaultproject.io/application.json
            - name: PROPERTIES_TYPE
              value: json
          image: vault-secret-fetcher
          imagePullPolicy: Always
          name: vault-secret-fetcher
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/run/secrets/vaultproject.io
              name: vault-agent-volume
{% endif %}            
        - env:
          - name: JWS_ADMIN_USERNAME
            value: ${JWS_ADMIN_USERNAME}
          - name: JWS_ADMIN_PASSWORD
            value: ${JWS_ADMIN_PASSWORD}
          envFrom:
{% if configMaps is defined %}
{% for cm in configMaps %}
{% if cm.maptoenv is defined %}
            - configMapRef:
                name: {{ cm.name }}
{% endif %}            
{% endfor %}            
{% endif %}            
          volumeMounts:
            - mountPath: /var/run/secrets/vaultproject.io
              name: vault-agent-volume
{% if configMaps is defined %}
{% for cm in configMaps %}
{% if cm.mountpath is defined %}
            - mountPath:  {{ cm.mountpath }}
              name: volume-{{ cm.name }}
{% endif %}            
{% endfor %}            
{% endif %}            
          image: ${APPLICATION_NAME}
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - curl -s -u ${JWS_ADMIN_USERNAME}:${JWS_ADMIN_PASSWORD} 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName'
                |grep -iq 'stateName *= *STARTED'
        terminationGracePeriodSeconds: 60
        volumes:
{% if configMaps is defined %}
{% for cm in configMaps %}
{% if cm.mountpath is defined %}
          - configMap:
              name: {{ cm.name }}
            name: volume-{{ cm.name }}
{% endif %}            
{% endfor %}            
{% endif %}            
{% if addVault is defined %}
          - configMap:
              defaultMode: 420
              items:
                - key: vault-agent-config
                  path: agent.config
              name: vault-agent-config
            name: vault-config
          - emptyDir:
              medium: Memory
            name: vault-agent-volume{% endif %}            
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    namespace: ${NAMESPACE}
- apiVersion: v1
  id: ${APPLICATION_NAME}-http
  kind: Route
  metadata:
    annotations:
      description: Route for application's service.
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    namespace: ${NAMESPACE}
  spec:
    host: ${HOSTNAME_HTTP}
    path: ${ROUTE_PATH}
    to:
      name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Service for application.
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APPLICATION_NAME}
      deploymentConfig: ${APPLICATION_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Service for application.
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APPLICATION_NAME}
      deploymentConfig: ${APPLICATION_NAME}
parameters:
- description: The name for the application.
  name: APPLICATION_NAME
  required: true
  value: jws-app
- description: The namespace to deploy to
  name: NAMESPACE
  required: true
- description: Name of a service account that can deploy to this project
  name: SA_NAME
  required: true
  value: jenkins
- description: Namespace of service account that can deploy to this project
  name: SA_NAMESPACE
  required: true
  value: basic-tomcat-build
- description: 'Custom hostname for http service route.  Leave blank for default hostname,
    e.g.: <application-name>-<project>.<default-domain-suffix>'
  name: HOSTNAME_HTTP
- description: Path to use for route.
  name: ROUTE_PATH
  value: /ticket-monster
- description: JWS Admin User
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: JWS_ADMIN_USERNAME
  required: true
- description: JWS Admin Password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: JWS_ADMIN_PASSWORD
  required: true
